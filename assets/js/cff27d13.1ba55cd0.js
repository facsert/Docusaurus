"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[1449],{4369:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=l(4848),s=l(8453);const o={author:"facsert",pubDatetime:new Date("2022-09-07T15:28:43.000Z"),title:"Python openpyxl",slug:"Python openpyxl",featured:!1,draft:!1,tags:["Python","openpyxl"],description:"Python Excel \u8868\u683c\u6a21\u5757 openpyxl"},i=void 0,r={id:"Python/python-openpyxl",title:"Python openpyxl",description:"Python Excel \u8868\u683c\u6a21\u5757 openpyxl",source:"@site/docs/Python/python-openpyxl.md",sourceDirName:"Python",slug:"/Python/Python openpyxl",permalink:"/docs/Python/Python openpyxl",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Python/python-openpyxl.md",tags:[{inline:!0,label:"Python",permalink:"/docs/tags/python"},{inline:!0,label:"openpyxl",permalink:"/docs/tags/openpyxl"}],version:"current",frontMatter:{author:"facsert",pubDatetime:"2022-09-07T15:28:43.000Z",title:"Python openpyxl",slug:"Python openpyxl",featured:!1,draft:!1,tags:["Python","openpyxl"],description:"Python Excel \u8868\u683c\u6a21\u5757 openpyxl"},sidebar:"tutorialSidebar",previous:{title:"Python Magic Method",permalink:"/docs/Python/Python Magic Method"},next:{title:"Python pandas",permalink:"/docs/Python/Python pandas"}},d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"\u5b89\u88c5",id:"\u5b89\u88c5",level:2},{value:"\u521b\u5efa\u8bfb\u53d6",id:"\u521b\u5efa\u8bfb\u53d6",level:2},{value:"\u521b\u5efa\u8868",id:"\u521b\u5efa\u8868",level:3},{value:"\u8bfb\u53d6\u8868",id:"\u8bfb\u53d6\u8868",level:3},{value:"\u8bfb\u5199",id:"\u8bfb\u5199",level:2},{value:"\u8d4b\u503c\u548c\u8bfb\u53d6",id:"\u8d4b\u503c\u548c\u8bfb\u53d6",level:3},{value:"\u591a\u884c\u904d\u5386",id:"\u591a\u884c\u904d\u5386",level:3},{value:"\u6837\u5f0f",id:"\u6837\u5f0f",level:2},{value:"\u5b57\u4f53",id:"\u5b57\u4f53",level:3},{value:"\u586b\u5145\u989c\u8272",id:"\u586b\u5145\u989c\u8272",level:3},{value:"\u8fb9\u6846",id:"\u8fb9\u6846",level:3},{value:"\u5bf9\u9f50",id:"\u5bf9\u9f50",level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3}];function a(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsx)(n.p,{children:"python excel \u6a21\u5757"}),"\n",(0,t.jsx)(n.h2,{id:"\u5b89\u88c5",children:"\u5b89\u88c5"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:" $ pip install openpyxl\n $ pip list | grep openpyxl\n > openpyxl                      3.0.10\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u521b\u5efa\u8bfb\u53d6",children:"\u521b\u5efa\u8bfb\u53d6"}),"\n",(0,t.jsx)(n.h3,{id:"\u521b\u5efa\u8868",children:"\u521b\u5efa\u8868"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" from openpyxl import Workbook\n\n wb = Workbook()                                 # \u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u8868\n sheet = wb.active                               # \u6fc0\u6d3b\u7b2c\u4e00\u4e2a sheet\n sheet['A1'] = 'hellow world'                    # sheet A1 \u8d4b\u503c\n wb.save('test.xlsx')                            # \u4fdd\u5b58 excel \u6587\u4ef6\u4e3a test.xlsx\n wb.close()                                      # \u5173\u95ed\u5de5\u4f5c\u8868\n\n\n wb.create_sheet(name:str [, index:int = -1])    # \u81ea\u5b9a\u4e49 sheet \u540d\u79f0\u548c\u4f4d\u7f6e\n wb.create_sheet('first_sheet', 0)               # \u5728 0 \u63d2\u5165 \u540d\u4e3a first_sheet \u7684\u8868\n sheet.title                                     # \u83b7\u53d6sheet \u7684\u540d\u79f0, \u4e5f\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c\n > first_sheet\n\n for sheet in wb:                                # \u904d\u5386\u5de5\u4f5c\u8868, \u6253\u5370\u6240\u6709\u8868\u540d\u79f0\n    print(sheet.title)\n\n wb.remove(sheet)                                # \u5220\u9664 sheet, \u53c2\u6570\u662f sheet \u5bf9\u8c61\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u8bfb\u53d6\u8868",children:"\u8bfb\u53d6\u8868"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" from openpyxl import load_workbook\n\n wb = load_workbook('test.xlsx')                 # \u6253\u5f00\u4e00\u4e2a\u5df2\u5b58\u5728\u7684 excel \u6587\u4ef6\n sheet_names = wb.sheetnames                     # \u83b7\u53d6\u6240\u6709\u8868\u540d\u7ec4\u6210\u7684\u5217\u8868\n > ['first', 'second', 'third']\n\n sheet = wb['first']\n sheet['A1']\n > 'hellow world'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u8bfb\u5199",children:"\u8bfb\u5199"}),"\n",(0,t.jsx)(n.h3,{id:"\u8d4b\u503c\u548c\u8bfb\u53d6",children:"\u8d4b\u503c\u548c\u8bfb\u53d6"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" sheet['A1'] = 'hellow world'                    # A1 \u8d4b\u503c hellow world\n sheet['A1'].value                               # \u8bfb\u53d6 A1 \u65b9\u683c\u7684\u503c\n > 'hellow world'\n\n sheet.cell(row=1, col=1).value = 'value'        # \u884c 1, \u5217 1 \u8d4b\u503c value\n grid = sheet.cell(row=1, column=1, value='ok')  # \u7b2c\u4e00\u5217\u7b2c\u4e00\u884c\u8d4b\u503c ok, \u8fd4\u56de\u4e00\u4e2a cell \u5bf9\u8c61\n sheel.cell(1, 1).value                          # \u8bfb\u53d6\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u65b9\u683c\u7684\u503c\n > 'ok'\n\n row_one = sheet['A1': 'F1']                     # \u83b7\u53d6\u591a\u6570\u65b9\u683c, \u8fd4\u56de cell \u5bf9\u8c61\u7684\u5143\u7ec4\n sheet.max_column                                # \u542b\u6709\u6570\u636e\u7ed3\u675f\u5217\n sheet.append([1, 2, 3, 4])                      # \u6dfb\u52a0\u4e00\u884c\u6570\u636e\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u591a\u884c\u904d\u5386",children:"\u591a\u884c\u904d\u5386"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"sheet.iter_rows() \u6bcf\u6b21\u8fd4\u56de\u4e00\u6574\u884c\u7ec4\u6210\u7684\u5143\u7ec4"}),"\n",(0,t.jsx)(n.li,{children:"sheet.iter_cols() \u6bcf\u6b21\u8fd4\u56de\u4e00\u6574\u5217\u7ec4\u6210\u7684\u5143\u7ec4"}),"\n"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"\u53c2\u6570"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"\u542b\u4e49"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"min_row"})}),(0,t.jsxs)(n.td,{style:{textAlign:"center"},children:["\u8d77\u59cb\u884c, default",":None"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"max_row"})}),(0,t.jsxs)(n.td,{style:{textAlign:"center"},children:["\u7ed3\u675f\u884c, default",":None"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"min_col"})}),(0,t.jsxs)(n.td,{style:{textAlign:"center"},children:["\u8d77\u59cb\u5217, default",":None"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"max_col"})}),(0,t.jsxs)(n.td,{style:{textAlign:"center"},children:["\u7ed3\u675f\u5217, default",":None"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"values_only"})}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"True:\u53ea\u8fd4\u56de\u503c, False: \u8fd4\u56de cell \u5bf9\u8c61"})]})]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\n for row in sheet.iter_rows(\n    min_row=1, max_col=3, max_row=2):            # \u904d\u5386\u7b2c 1 \u81f3\u7b2c 2 \u884c, \u53d6 3 \u5217\n    for cell in row:\n        print(cell)\n\n <Cell Sheet1.A1>\n <Cell Sheet1.B1>\n <Cell Sheet1.C1>\n <Cell Sheet1.A2>\n <Cell Sheet1.B2>\n <Cell Sheet1.C2>\n\n for col in sheet.iter_cols(\n    min_row=1, max_col=3, max_row=2):            # \u904d\u5386\u7b2c 1 \u81f3\u7b2c 2 \u884c, \u53d6 3 \u5217\n    for cell in col:\n        print(cell)\n\n<Cell Sheet1.A1>\n<Cell Sheet1.A2>\n<Cell Sheet1.B1>\n<Cell Sheet1.B2>\n<Cell Sheet1.C1>\n<Cell Sheet1.C2>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u6837\u5f0f",children:"\u6837\u5f0f"}),"\n",(0,t.jsx)(n.h3,{id:"\u5b57\u4f53",children:"\u5b57\u4f53"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" from openpyxl.styles import Font\n\n cell.font = Font(\n   name=\"\u5fae\u8f6f\u96c5\u9ed1\",                                  # \u5b57\u4f53\n   size=15,                                         # \u5b57\u4f53\u5927\u5c0f\n   color=\"0000FF\",                                  # \u5b57\u4f53\u989c\u8272\uff0c\u752816\u8fdb\u5236rgb\u8868\u793a\n   bold=True,                                       # \u662f\u5426\u52a0\u7c97\uff0cTrue/False\n   italic=True,                                     # \u662f\u5426\u659c\u4f53\uff0cTrue/False\n   strike=None,                                     # \u662f\u5426\u4f7f\u7528\u5220\u9664\u7ebf\uff0cTrue/False\n   underline=None,                                  # \u4e0b\u5212\u7ebf, \u53ef\u9009'singleAccounting', 'double', 'single', 'doubleAccounting'\n )\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u586b\u5145\u989c\u8272",children:"\u586b\u5145\u989c\u8272"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:' from openpyxl.styles import PatternFill\n\n cell.fill = PatternFill(\n    patternType="solid",                         # \u586b\u5145\u7c7b\u578b\n    fgColor="F562a4",                            # \u524d\u666f\u8272\uff0c16\u8fdb\u5236rgb\n    bgColor="0000ff",                            # \u80cc\u666f\u8272\uff0c16\u8fdb\u5236rgb\n )\n\n patternType:                                    # patternType \u53ef\u9009\u503c\n     none\u3001solid\u3001darkGray\u3001mediumGray\u3001lightGray\u3001\n     lightDown\u3001lightGray\u3001lightGrid\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\u8fb9\u6846",children:"\u8fb9\u6846"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:' from openpyxl.styles import Border, Side\n\n side = Side(\n   style="medium",                               # \u8fb9\u6846\u6837\u5f0f\n   color="ff66dd",                               # \u8fb9\u6846\u989c\u8272\uff0c16\u8fdb\u5236rgb\u8868\u793a\n )\n\n style:                                          # style \u53ef\u9009\u503c\n     dashDot\u3001dashDotDot\u3001dashed\u3001dotted\u3001double\u3001\n     hair\u3001medium\u3001mediumDashDot\u3001mediumDashDotDot\u3001\n     mediumDashed\u3001slantDashDot\u3001thick\u3001thin\n\n cell.border = Border(\n    top=side,                                    # \u4e0a\u8fb9\u6846\u4f7f\u7528\u5b9a\u4e49\u7684 side\n    bottom=side,                                 # \u4e0b\u8fb9\u6846\u4f7f\u7528\u5b9a\u4e49\u7684 side\n    left=side,                                   # \u5de6\u8fb9\u6846\u4f7f\u7528\u5b9a\u4e49\u7684 side\n    right=side,                                  # \u53f3\u8fb9\u6846\u4f7f\u7528\u5b9a\u4e49\u7684 side\n    diagonal=side                                # \u5bf9\u89d2\u7ebf\u4f7f\u7528\u5b9a\u4e49\u7684 side\n)\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\u5bf9\u9f50",children:"\u5bf9\u9f50"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" from openpyxl.styles import Alignment\n\n cell.alignment = Alignment(\n    horizontal='left',                           # \u6c34\u5e73\u5bf9\u9f50\uff0c\u53ef\u9009general\u3001left\u3001center\u3001right\u3001fill\u3001justify\u3001centerContinuous\u3001distributed\n    vertical='top',                              # \u5782\u76f4\u5bf9\u9f50\uff0c \u53ef\u9009top\u3001center\u3001bottom\u3001justify\u3001distributed\n    text_rotation=0,                             # \u5b57\u4f53\u65cb\u8f6c\uff0c0~180\u6574\u6570\n    wrap_text=False,                             # \u662f\u5426\u81ea\u52a8\u6362\u884c\n    shrink_to_fit=False,                         # \u662f\u5426\u7f29\u5c0f\u5b57\u4f53\u586b\u5145\n    indent=0,                                    # \u7f29\u8fdb\u503c\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'class Excel:\n\n    def __init__(self, file, mode):\n        self.file = file\n        self.mode = mode\n        self.mode_init()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, e_type, e_value, e_tb):\n        self.wb.close()\n        if any((e_type, e_value, e_tb)):\n            raise RuntimeError(f"error: {e_value}\\n")\n\n    def mode_init(self):\n        """ \u6a21\u5f0f\u521d\u59cb\u5316\n            \'w\' \u65b0\u5efa excel \u8868\u683c\n            \'r\' \u8bfb\u53d6 excel \u8868\u683c\n        """\n        if self.mode.lower() == \'w\':\n            self.wb = Workbook()\n            self.sheet = self.wb.active\n            return\n\n        if self.mode.lower() == \'r\':\n            self.wb = load_workbook(self.file, data_only=True)\n            self.sheet = self.wb[self.wb.sheetnames[0]]\n            self.head = self.read_head()\n            return\n\n        print(f\'error mode {self.mode}, select r or w\')\n        exit()\n\n    def cell_value(self, row, col):\n        """ \u901a\u8fc7\u5750\u6807\u8bfb\u53d6\u503c """\n        return self.sheet.cell(row=row, column=col).value\n\n    def set_cell(self, row, col, value):\n        """ \u901a\u8fc7\u5750\u6807\u5199\u5165\u503c """\n        self.sheet.cell(row, col).value = value\n\n    def read_head(self):\n        """ \u8bfb\u53d6\u8868\u683c\u8868\u5934 """\n        max_col = self.sheet.max_column + 1\n        return [self.cell_value(1, col) for col in range(1, max_col)]\n\n    def select_column(self, select, key=None):\n        """ \u9009\u62e9\u5c5e\u6027\u5bf9\u5e94\u7684\u5217\n            select \u7b5b\u9009\u9700\u8981\u8f93\u51fa\u7684\u5217\n\n        """\n        if len(select) == 0:\n            select = self.head\n\n        if key != None and key not in select:\n            print(f"{key} not in {select}")\n            exit()\n\n        if set(self.head) < set(select):\n            print(f\'{select} not in {self.head}\')\n            exit()\n\n        return [self.head.index(k) for k in select if k in self.head]\n\n    def excel_to_list(self, select=[]):\n        """ \u8bfb\u53d6\u8868\u683c\u751f\u6210\u5217\u8868\n            select \u7b5b\u9009\u9700\u8981\u8bfb\u53d6\u7684\u5217\n        """\n        indexs = self.select_column(select)\n        excel_list = []\n\n        for row in range(2, self.sheet.max_row + 1):\n            excel_list.append({\n                self.head[col]: self.cell_value(row, col+1)\n                for col in indexs\n            })\n        return excel_list\n\n    def excel_to_dict(self, key, select=[]):\n        """ \u8bfb\u53d6\u8868\u683c\u751f\u6210\u5b57\u5178, \u4e00\u884c\u4e00\u4e2a\u5b57\u5178\n            key \u6307\u5b9a\u6539\u884c\u8f6c\u6210\u5b57\u5178\u7684 key\n            select \u7b5b\u9009\u9700\u8981\u8f93\u51fa\u7684\u952e\u503c\u5bf9\n        """\n        indexs = self.select_column(select, key)\n        excel_dict = {}\n\n        for row in range(2, self.sheet.max_row + 1):\n            key_value = self.cell_value(row, self.head.index(key) + 1)\n            excel_dict.update({key_value: {\n                self.head[col]: self.cell_value(row, col+1)\n                for col in indexs\n            }})\n\n        return dict(sorted(excel_dict.items()))\n\n    def list_to_excel(self, lst, select=[]):\n        """ \u5217\u8868\u751f\u6210\u8868\u683c\n            lst list[dict]: \u5b57\u5178\u5217\u8868\n            select \u7b5b\u9009\u9700\u8981\u8f93\u51fa\u7684\u5217\n        """\n        try:\n            self.head = list(lst[0].keys())\n        except Exception as e:\n            print(f"data type error, must list[dict]")\n            exit()\n\n        indexs = self.select_column(select)\n        self.sheet.append([self.head[i] for i in indexs])\n        for line in lst:\n            self.sheet.append([line[self.head[i]] for i in indexs])\n\n        self.wb.save(self.file)\n\n    def dict_to_excel(self, dic, select=[]):\n        """\u5b57\u5178\u751f\u6210\u8868\u683c\n           dic dict[dict]: \u53cc\u5c42\u5b57\u5178\n           select \u9700\u8981\u5199\u5165\u8868\u683c\u7684\u952e\u503c\u5bf9\n        """\n        try:\n            self.head = list(list(dic.values())[0].keys())\n        except Exception as e:\n            print(f"data type error, must dict[str, dict]")\n            exit()\n\n        indexs = self.select_column(select)\n        self.sheet.append([self.head[i] for i in indexs])\n        for line in dic.values():\n            self.sheet.append([line[self.head[i]] for i in indexs])\n\n        self.wb.save(self.file)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>r});var t=l(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);